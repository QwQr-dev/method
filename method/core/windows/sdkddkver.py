# coding = 'utf-8'

import sys
from struct import calcsize


def _nt_to_hex() -> int:
    major = sys.getwindowsversion().major
    minor = sys.getwindowsversion().minor
    return (major << 8) | minor


WIN64 = True if calcsize('P') * 8 == 64 else False
UNICODE = True if sys.maxunicode > 0xffff else False

####################################################################
# sdkddkver.h

try:
    WIN32_WINNT = _nt_to_hex()
except:
    WIN32_WINNT = 0x0502

WIN32_WINNT_NT4 = 0x0400
WIN32_WINNT_WIN2K = 0x0500
WIN32_WINNT_WINXP = 0x0501
WIN32_WINNT_WS03 = 0x0502
WIN32_WINNT_WIN6 = 0x0600
WIN32_WINNT_VISTA = 0x0600
WIN32_WINNT_WS08 = 0x0600
WIN32_WINNT_LONGHORN = 0x0600
WIN32_WINNT_WIN7 = 0x0601
WIN32_WINNT_WIN8 = 0x0602
WIN32_WINNT_WINBLUE = 0x0603
WIN32_WINNT_WINTHRESHOLD = 0x0A00
WIN32_WINNT_WIN10 = 0x0A00

WIN32_IE_IE20 = 0x0200
WIN32_IE_IE30 = 0x0300
WIN32_IE_IE302 = 0x0302
WIN32_IE_IE40 = 0x0400
WIN32_IE_IE401 = 0x0401
WIN32_IE_IE50 = 0x0500
WIN32_IE_IE501 = 0x0501
WIN32_IE_IE55 = 0x0550
WIN32_IE_IE60 = 0x0600
WIN32_IE_IE60SP1 = 0x0601
WIN32_IE_IE60SP2 = 0x0603
WIN32_IE_IE70 = 0x0700
WIN32_IE_IE80 = 0x0800
WIN32_IE_IE90 = 0x0900
WIN32_IE_IE100 = 0x0a00
WIN32_IE_IE110 = 0x0A00

WIN32_IE_NT4 = WIN32_IE_IE20
WIN32_IE_NT4SP1 = WIN32_IE_IE20
WIN32_IE_NT4SP2 = WIN32_IE_IE20
WIN32_IE_NT4SP3 = WIN32_IE_IE302
WIN32_IE_NT4SP4 = WIN32_IE_IE401
WIN32_IE_NT4SP5 = WIN32_IE_IE401
WIN32_IE_NT4SP6 = WIN32_IE_IE50
WIN32_IE_WIN98 = WIN32_IE_IE401
WIN32_IE_WIN98SE = WIN32_IE_IE50
WIN32_IE_WINME = WIN32_IE_IE55
WIN32_IE_WIN2K = WIN32_IE_IE501
WIN32_IE_WIN2KSP1 = WIN32_IE_IE501
WIN32_IE_WIN2KSP2 = WIN32_IE_IE501
WIN32_IE_WIN2KSP3 = WIN32_IE_IE501
WIN32_IE_WIN2KSP4 = WIN32_IE_IE501
WIN32_IE_XP = WIN32_IE_IE60
WIN32_IE_XPSP1 = WIN32_IE_IE60SP1
WIN32_IE_XPSP2 = WIN32_IE_IE60SP2
WIN32_IE_WS03 = 0x0602
WIN32_IE_WS03SP1 = WIN32_IE_IE60SP2
WIN32_IE_WIN6 = WIN32_IE_IE70
WIN32_IE_LONGHORN = WIN32_IE_IE70
WIN32_IE_WIN7 = WIN32_IE_IE80
WIN32_IE_WIN8 = WIN32_IE_IE100
WIN32_IE_WINBLUE = WIN32_IE_IE100
WIN32_IE_WINTHRESHOLD = WIN32_IE_IE110
WIN32_IE_WIN10 = WIN32_IE_IE110

NTDDI_WIN2K = 0x05000000
NTDDI_WIN2KSP1 = 0x05000100
NTDDI_WIN2KSP2 = 0x05000200
NTDDI_WIN2KSP3 = 0x05000300
NTDDI_WIN2KSP4 = 0x05000400

NTDDI_WINXP = 0x05010000
NTDDI_WINXPSP1 = 0x05010100
NTDDI_WINXPSP2 = 0x05010200
NTDDI_WINXPSP3 = 0x05010300
NTDDI_WINXPSP4 = 0x05010400

NTDDI_WS03 = 0x05020000
NTDDI_WS03SP1 = 0x05020100
NTDDI_WS03SP2 = 0x05020200
NTDDI_WS03SP3 = 0x05020300
NTDDI_WS03SP4 = 0x05020400

NTDDI_WIN6 = 0x06000000
NTDDI_WIN6SP1 = 0x06000100
NTDDI_WIN6SP2 = 0x06000200
NTDDI_WIN6SP3 = 0x06000300
NTDDI_WIN6SP4 = 0x06000400

NTDDI_VISTA = NTDDI_WIN6
NTDDI_VISTASP1 = NTDDI_WIN6SP1
NTDDI_VISTASP2 = NTDDI_WIN6SP2
NTDDI_VISTASP3 = NTDDI_WIN6SP3
NTDDI_VISTASP4 = NTDDI_WIN6SP4
NTDDI_LONGHORN = NTDDI_VISTA

NTDDI_WS08 = NTDDI_WIN6SP1
NTDDI_WS08SP2 = NTDDI_WIN6SP2
NTDDI_WS08SP3 = NTDDI_WIN6SP3
NTDDI_WS08SP4 = NTDDI_WIN6SP4

NTDDI_WIN7 = 0x06010000
NTDDI_WIN8 = 0x06020000
NTDDI_WINBLUE = 0x06030000
NTDDI_WINTHRESHOLD = 0x0A000000
NTDDI_WIN10 = 0x0A000000
NTDDI_WIN10_TH2 = 0x0A000001
NTDDI_WIN10_RS1 = 0x0A000002
NTDDI_WIN10_RS2 = 0x0A000003
NTDDI_WIN10_RS3 = 0x0A000004
NTDDI_WIN10_RS4 = 0x0A000005
NTDDI_WIN10_RS5 = 0x0A000006
NTDDI_WIN10_19H1 = 0x0A000007
NTDDI_WIN10_VB = 0x0A000008
NTDDI_WIN10_MN = 0x0A000009
NTDDI_WIN10_FE = 0x0A00000A
NTDDI_WIN10_CO = 0x0A00000B
NTDDI_WIN10_NI = 0x0A00000C

WDK_NTDDI_VERSION = NTDDI_WIN10_NI

OSVERSION_MASK = 0xFFFF0000
SPVERSION_MASK = 0x0000FF00
SUBVERSION_MASK = 0x000000FF


def OSVER(Version: int) -> int:
    return (Version & OSVERSION_MASK)


def SPVER(Version: int) -> int:
    return ((Version & SPVERSION_MASK) >> 8)


def SUBVER(Version: int) -> int:
    return (Version & SUBVERSION_MASK)


def NTDDI_VERSION_FROMWIN32_WINNT2(Version: int | float) -> (int | float):
    if isinstance(Version, float):
        return Version
    
    if not isinstance(Version, int):
        raise TypeError(f"The object should be of int or float, not '{type(Version).__name__}'")
    
    return Version << 16


def NTDDI_VERSION_FROMWIN32_WINNT(Version: int | float) -> (int | float):
    return NTDDI_VERSION_FROMWIN32_WINNT2(Version)


NTDDI_VERSION: int = NTDDI_VERSION_FROMWIN32_WINNT(WIN32_WINNT)

WINVER = WIN32_WINNT

if WIN32_WINNT <= WIN32_WINNT_NT4:
    WIN32_IE = WIN32_IE_IE50
elif WIN32_WINNT <= WIN32_WINNT_WIN2K:
    WIN32_IE = WIN32_IE_IE501
elif WIN32_WINNT <= WIN32_WINNT_WINXP:
    WIN32_IE = WIN32_IE_IE60
elif WIN32_WINNT <= WIN32_WINNT_WS03:
    WIN32_IE = WIN32_IE_WS03
elif WIN32_WINNT <= WIN32_WINNT_VISTA:
    WIN32_IE = WIN32_IE_LONGHORN
elif WIN32_WINNT <= WIN32_WINNT_WIN7:
    WIN32_IE = WIN32_IE_WIN7
elif WIN32_WINNT <= WIN32_WINNT_WIN8:
    WIN32_IE = WIN32_IE_WIN8
else:
    WIN32_IE = WIN32_WINNT

if (((OSVER(NTDDI_VERSION) == NTDDI_WIN2K) and (WIN32_WINNT != WIN32_WINNT_WIN2K)) or 
    ((OSVER(NTDDI_VERSION) == NTDDI_WINXP) and (WIN32_WINNT != WIN32_WINNT_WINXP)) or 
    ((OSVER(NTDDI_VERSION) == NTDDI_WS03) and (WIN32_WINNT != WIN32_WINNT_WS03))  or 
    ((OSVER(NTDDI_VERSION) == NTDDI_WINXP) and (WIN32_WINNT != WIN32_WINNT_WINXP))):

    raise OSError('NTDDI_VERSION and WIN32_WINNT mismatch!')

